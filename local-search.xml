<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>慕课C语言-1</title>
    <link href="/2025/04/10/%E6%85%95%E8%AF%BEC%E8%AF%AD%E8%A8%80-1/"/>
    <url>/2025/04/10/%E6%85%95%E8%AF%BEC%E8%AF%AD%E8%A8%80-1/</url>
    
    <content type="html"><![CDATA[<h1 id="慕课C语言-1"><a href="#慕课C语言-1" class="headerlink" title="慕课C语言-1"></a>慕课C语言-1</h1><p><a href="https://www.icourse163.org/course/PKU-1001553023?tid=1472328519">慕课C链接</a><br><a href="http://cxsjsxmooc.openjudge.cn/">考试和练习链接</a></p><h2 id="1-二进制和十六进制"><a href="#1-二进制和十六进制" class="headerlink" title="1.二进制和十六进制"></a><strong>1.二进制和十六进制</strong></h2><h3 id="1-用0和1表示各种信息"><a href="#1-用0和1表示各种信息" class="headerlink" title="1.用0和1表示各种信息"></a>1.用0和1表示各种信息</h3><p>二进制数的一位，取值只能是0或1，称为一个“比特”(bit)，简写：b<br>八个二进制位称为一个“字节”（byte),简写: B<br>1024(210)字节称为1KB ，1024KB称作1MB(1兆)，1024MB称作1GB，1024GB称作1TB<br>用8个连续的0或1（即1个字节）来表示一个字母、数字或标点符号此即为ASCII编码方案</p><h3 id="2-给定一个K进制数，求它是多大（应用题）"><a href="#2-给定一个K进制数，求它是多大（应用题）" class="headerlink" title="2.给定一个K进制数，求它是多大（应用题）"></a>2.给定一个K进制数，求它是多大（应用题）</h3><p>数就是数，没有进制之分，只有数的表示形式，才有进制之分。<br>所谓“十进制数”，是“数的十进制表示形式” 的简称。</p><h3 id="3-给定一个数，求其K进制表示形式（应用题）"><a href="#3-给定一个数，求其K进制表示形式（应用题）" class="headerlink" title="3.给定一个数，求其K进制表示形式（应用题）"></a>3.给定一个数，求其K进制表示形式（应用题）</h3><p>求数的K进制表示形式 – 短除法</p><h3 id="4-K进制小数"><a href="#4-K进制小数" class="headerlink" title="4.K进制小数"></a>4.K进制小数</h3><ol><li>n进制下的有限位小数，在m进制下可能就无法精确表示，因为会无限循环</li><li>十进制有限位小数，在二进制的情况未必能用有限位数表示出来。计算机内存有限，不可能存放无限位，因此计算机的小数运算会有误差。比如，计算机其实无法精确表示4.9，只能精确表示4.899999999…之类一个很接近的数</li></ol><h3 id="5-十六进制数到十进制数的转换"><a href="#5-十六进制数到十进制数的转换" class="headerlink" title="5.十六进制数到十进制数的转换"></a>5.十六进制数到十进制数的转换</h3><h3 id="6-十六进制数到二进制数的互相转换"><a href="#6-十六进制数到二进制数的互相转换" class="headerlink" title="6.十六进制数到二进制数的互相转换"></a>6.十六进制数到二进制数的互相转换</h3><h2 id="2-C-快速入门"><a href="#2-C-快速入门" class="headerlink" title="2.C++快速入门"></a><strong>2.C++快速入门</strong></h2><h3 id="1-为什么是C-而不是C语言"><a href="#1-为什么是C-而不是C语言" class="headerlink" title="1.为什么是C++而不是C语言"></a>1.为什么是C++而不是C语言</h3><p>C语言是好东西，但是有点弱<br>C++ 更是好东西，但是有点烦<br>我们要学的，是C++的一部分，基本上就是:C语言+ STL （STL是C++中能让你节省大量编程时间的神兵！)<br>因为暂时不写大程序，因此不用关心“面向对象”的事情！</p><h3 id="2-第一个C-程序-输出"><a href="#2-第一个C-程序-输出" class="headerlink" title="2.第一个C++程序-输出"></a>2.第一个C++程序-输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-第二个C-程序-输出更多"><a href="#3-第二个C-程序-输出更多" class="headerlink" title="3.第二个C++程序-输出更多"></a>3.第二个C++程序-输出更多</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I have %d dollars.\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I want to buy:\na book.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-第三个C-程序-输入"><a href="#4-第三个C-程序-输入" class="headerlink" title="4.第三个C++程序-输入"></a>4.第三个C++程序-输入</h3><p>输入两个整数，输出它们的和 (NOI.POJ 7883)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a+b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-第四个C-程序-输入字符"><a href="#5-第四个C-程序-输入字符" class="headerlink" title="5.第四个C++程序-输入字符"></a>5.第四个C++程序-输入字符</h3><p>%c表示读入一个字符，不会跳过空格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a,b,c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c%c%c&quot;</span>,&amp;a,&amp;b,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c%c&quot;</span>,a,b,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">x y<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">x y<br></code></pre></td></tr></table></figure><h3 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><p>经常需要在程序中写点说明性的文字，帮助程序阅读者理解程序。这就需要用注释<br>程序的注释不是程序的一部分，不会对程序运行产生影响<br>1.单行注释：用 &#x2F;&#x2F;<br>2.多行注释用 &#x2F;* *&#x2F;</p><h3 id="7-程序文件的保存"><a href="#7-程序文件的保存" class="headerlink" title="7.程序文件的保存"></a>7.程序文件的保存</h3><p>本课程中的所有程序，都应该存为后缀名为 “.cpp”的文件然后编译，不能存成 “.c”文件！</p><h2 id="3-变量和数据类型初探"><a href="#3-变量和数据类型初探" class="headerlink" title="3.变量和数据类型初探"></a><strong>3.变量和数据类型初探</strong></h2><h3 id="1-什么是变量"><a href="#1-什么是变量" class="headerlink" title="1.什么是变量"></a>1.什么是变量</h3><p>1.变量就是一个代号，程序运行时系统会自动为变量分配内存空间，于是变量就代表了系统分配的那片内存空间，对变量的访问，就是对其代表的内存空间的访问。<br>2.变量有名字和类型两种属性，不同变量的名字就对应了内存中的不同地址（即不同位置），而变量的类型，决定了一个变量占用多少个字节。<br>3.在C++语言中，变量要先定义，然后才能使用。“使用”有时也称为“引用”。读取或修改一个变量的值，都叫使用这个变量。定义变量的语句，要出现所有使用该变量的所有语句之前。</p><h3 id="2-变量的定义"><a href="#2-变量的定义" class="headerlink" title="2.变量的定义"></a>2.变量的定义</h3><h4 id="1-类型名-变量名1-变量名2-……-变量名n"><a href="#1-类型名-变量名1-变量名2-……-变量名n" class="headerlink" title="1.类型名 变量名1,变量名2,……,变量名n;"></a>1.类型名 变量名1,变量名2,……,变量名n;</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number,price;<br></code></pre></td></tr></table></figure><h4 id="2-一个变量不能定义两次"><a href="#2-一个变量不能定义两次" class="headerlink" title="2.一个变量不能定义两次"></a>2.一个变量不能定义两次</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> number;<br><span class="hljs-type">double</span> number;<span class="hljs-comment">//错误，重复定义</span><br></code></pre></td></tr></table></figure><h4 id="3-变量的命名规则"><a href="#3-变量的命名规则" class="headerlink" title="3.变量的命名规则"></a>3.变量的命名规则</h4><ol><li>变量由大小写字母、数字和下划线构成,中间不能有空格，长度不限，不能以数字开头。</li><li>变量名是大小写相关的，name 和 Name 是不同的两个变量。</li><li>变量名不能和C++系统预留的一些名字（保留字)重复。C++预留的保留字为:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-type">char</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">continue</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">do</span><br><span class="hljs-type">double</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">enum</span> <span class="hljs-keyword">extern</span><br><span class="hljs-type">float</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">goto</span> <span class="hljs-keyword">if</span><br><span class="hljs-type">int</span> <span class="hljs-type">long</span> <span class="hljs-keyword">register</span> <span class="hljs-keyword">return</span><br><span class="hljs-type">short</span> <span class="hljs-type">signed</span> <span class="hljs-keyword">sizeof</span> <span class="hljs-type">static</span><br><span class="hljs-keyword">struct</span> <span class="hljs-keyword">switch</span> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">void</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">while</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">catch</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">const_cast</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">dynamic_cast</span> <span class="hljs-keyword">explicit</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">new</span><br><span class="hljs-keyword">operator</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">public</span> <br><span class="hljs-keyword">reinterpret_cast</span> <span class="hljs-keyword">static_cast</span> <span class="hljs-keyword">template</span> <br><span class="hljs-keyword">this</span> <span class="hljs-keyword">throw</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">try</span><br><span class="hljs-keyword">typeid</span> <span class="hljs-keyword">typename</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">virtual</span><br></code></pre></td></tr></table></figure><p>此外还要注意不要取名为 begin 、 end 、 next 、 index、list、link 等</p><h4 id="4-C-的数据类型"><a href="#4-C-的数据类型" class="headerlink" title="4.C++的数据类型"></a>4.C++的数据类型</h4><p>“数据类型”能够说明一个变量表示什么样的数据(整数，实数，还是字符等)。不同数据类型的变量，占用的存储空间大小不同。除了基本数据类型外，C++还允许程序员自定义数据类型。</p><h4 id="5-C-的基本数据类型"><a href="#5-C-的基本数据类型" class="headerlink" title="5.C++的基本数据类型"></a>5.C++的基本数据类型</h4><p>int,long,short,char的最高位(最左边)是符号位，为1则表示负数，为0表示非负数<br>一个字节等于8个比特，即8个二进制位</p><h4 id="6-用sizeof运算符求变量占用字节数"><a href="#6-用sizeof运算符求变量占用字节数" class="headerlink" title="6.用sizeof运算符求变量占用字节数"></a>6.用sizeof运算符求变量占用字节数</h4><p>sizeof(变量名)<br>sizeof(类型名)</p><h4 id="7-变量的初始化"><a href="#7-变量的初始化" class="headerlink" title="7.变量的初始化"></a>7.变量的初始化</h4><p>变量在定义的时候，可以给它指定一个初始值，这叫变量的初始化。<br>没有初始化的变量，其值一般是不确定的。</p><h2 id="4-变量和数据类型进阶"><a href="#4-变量和数据类型进阶" class="headerlink" title="4.变量和数据类型进阶"></a><strong>4.变量和数据类型进阶</strong></h2><h3 id="1-有符号整数和无符号整数"><a href="#1-有符号整数和无符号整数" class="headerlink" title="1.有符号整数和无符号整数"></a>1.有符号整数和无符号整数</h3><ol><li>short、int、long、long long 类型的变量，可以表示正数，也可以表示负数，称为有符号的整数类型。</li><li>unsigned short， unsigned int, unsigned long,unsigned long long类型的变量，只会被看作非负数，称为无符号的整数类型。</li></ol><h3 id="2-有符号整数的表示方式"><a href="#2-有符号整数的表示方式" class="headerlink" title="2.有符号整数的表示方式"></a>2.有符号整数的表示方式</h3><ol><li>将最左边的位（最高位)看作“符号位”。符号位为0，则表示是非负数，其绝对值就是除符号位以外的部分；符号位为1，则表示是负数，其绝对值是所有位取反（0变1，1变0）后再加1。</li><li>将一个负整数表示为二进制的方法：<br>设置符号位为1,再把其余位等于绝对值取反再加1</li></ol><h3 id="3-数据类型的自动转换"><a href="#3-数据类型的自动转换" class="headerlink" title="3.数据类型的自动转换"></a>3.数据类型的自动转换</h3><p>有些不同的数据类型之间是相容的，可以互相赋值，这叫数据类型的自动转换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> a = <span class="hljs-number">11</span>.<span class="hljs-number">34</span>; // <span class="hljs-number">11</span>.<span class="hljs-number">34</span>被自动转换为<span class="hljs-number">11</span>后赋值给a<br><span class="hljs-attribute">int</span> b = <span class="hljs-number">30</span>;<br><span class="hljs-attribute">double</span> d = b; // d的值是<span class="hljs-number">30</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>字符型数据可以转换成整型数据</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> k = <span class="hljs-string">&#x27;a&#x27;</span> ; <span class="hljs-regexp">//</span>k内容变为<span class="hljs-string">&#x27;a&#x27;</span>的ASCII码，即<span class="hljs-number">97</span><br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>,k) ; <span class="hljs-regexp">//</span>输出：<span class="hljs-number">97</span><br></code></pre></td></tr></table></figure><p>整型数据也可以转换为字符型数据，但只会留下最右边的一个字节（第0位到第7位），其他字节丢弃</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> n = <span class="hljs-number">98</span>;<br>char k = n ; <span class="hljs-regexp">//</span>k内容变<span class="hljs-number">98</span>,<span class="hljs-number">98</span>是字符<span class="hljs-string">&#x27;b&#x27;</span>的ASCII码<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%c</span>&quot;</span>,k) ; <span class="hljs-regexp">//</span>输出：b<br></code></pre></td></tr></table></figure><p>类型自动转换示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n1 = <span class="hljs-number">1378</span>; <span class="hljs-comment">//1378的十六进制形式是 0x562</span><br>    <span class="hljs-type">short</span> n2;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-type">double</span> d1 = <span class="hljs-number">7.809</span>;<br>    <span class="hljs-type">double</span> d2;<br>    n2 = c<span class="hljs-number">+1</span>; <span class="hljs-comment">//n2变为98 , 97是&#x27;a&#x27;的ASCII码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%c,n2=%d\n&quot;</span>,c,n2); <span class="hljs-comment">//输出 c=a,n2=98</span><br>    c = n1; <span class="hljs-comment">// n1是0x562, 0x62被当做ASCII码赋值给c,c变为 &#x27;b&#x27;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%c,n1=%d\n&quot;</span>,c,n1); <span class="hljs-comment">//输出 c=b,n1=1378</span><br>    n1 = d1; <span class="hljs-comment">// d1=7.809, 去掉小数部分后赋值给n1,n1变为7</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n1=%d\n&quot;</span>, n1); <span class="hljs-comment">//输出 n1=7</span><br>    d2 = n1; <span class="hljs-comment">//d2变为7</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d2=%f\n&quot;</span>,d2); <span class="hljs-comment">//输出 d2=7.000000</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-常量"><a href="#5-常量" class="headerlink" title="5.常量"></a><strong>5.常量</strong></h2><p>常量就是在程序运行过程中值不会发生改变，而且一眼就能看出其值的量<br>常量也可以分成多种：整型，浮点型，字符型，字符串,符号常量</p><h3 id="1-十进制整型常量"><a href="#1-十进制整型常量" class="headerlink" title="1.十进制整型常量"></a>1.十进制整型常量</h3><p>0 123 -456 677363</p><h3 id="2-十六进制整型常量，以“0x”开头"><a href="#2-十六进制整型常量，以“0x”开头" class="headerlink" title="2.十六进制整型常量，以“0x”开头"></a>2.十六进制整型常量，以“0x”开头</h3><p>0x123 -0x1a 0x2abcdef 0xFFA 0x100</p><h3 id="3-十六进制数中，用A-a-表示10-B-b-表示11-…-F-f-表示15"><a href="#3-十六进制数中，用A-a-表示10-B-b-表示11-…-F-f-表示15" class="headerlink" title="3.十六进制数中，用A(a)表示10, B(b)表示11 …. F(f)表示15"></a>3.十六进制数中，用A(a)表示10, B(b)表示11 …. F(f)表示15</h3><p>(3450)10 &#x3D; 0 ×100 + 5 ×101 + 4 ×102 + 3 ×103<br>0x2FAB &#x3D; 11×160 + 10 ×161 + 15 ×162 + 2 ×163 &#x3D; (12203)10</p><h3 id="4-一个十六进制位，正好对应于4个二进制位-F-1111-2"><a href="#4-一个十六进制位，正好对应于4个二进制位-F-1111-2" class="headerlink" title="4.一个十六进制位，正好对应于4个二进制位 F &#x3D; (1111)2"></a>4.一个十六进制位，正好对应于4个二进制位 F &#x3D; (1111)2</h3><h3 id="5-八进制整型常量，以0开头"><a href="#5-八进制整型常量，以0开头" class="headerlink" title="5.八进制整型常量，以0开头"></a>5.八进制整型常量，以0开头</h3><p>01 0123 -0456 0677</p><h3 id="6-字符型常量"><a href="#6-字符型常量" class="headerlink" title="6.字符型常量"></a>6.字符型常量</h3><p>字符型常量表示一个字符，用单引号括起来<br>‘a’ ‘B’ ‘,’ ‘0’ ‘9’ ‘:’<br>字符型常量可用于给char 和unsigned char类型的变量赋值<br>char c &#x3D; ‘a’;<br>unsigned char ch;<br>ch &#x3D; ‘9’;</p><h3 id="7-字符型常量和变量都占一个字节，内部存放的是字符的ASCII编码。"><a href="#7-字符型常量和变量都占一个字节，内部存放的是字符的ASCII编码。" class="headerlink" title="7.字符型常量和变量都占一个字节，内部存放的是字符的ASCII编码。"></a>7.字符型常量和变量都占一个字节，内部存放的是字符的ASCII编码。</h3><p>ASCII编码是一个0<del>255的整数<br>‘0’</del>’9’: 48 ~ 57<br>‘A’<del>’Z’: 65 ~ 90<br>‘a’</del>‘z’: 97 ~ 122<br>C++中还有一类字符常量，以’&#39;开头，如’\n’、’\r’、’\t’等，称为“转义字符”。所谓“转义”就是指’&#39;后面的字符被转成别的含义。</p><h3 id="8-字符串常量"><a href="#8-字符串常量" class="headerlink" title="8.字符串常量"></a>8.字符串常量</h3><ol><li>字符串常量是用双引号括起来的一串字符<br>“a” “abc” “1234567” </li><li>“” 也是一个字符串常量，它代表一个空串，即不包含任何字符的字符串</li><li>“a”和’a’是不一样的，前者是只有一个字符的字符串，后者是一个字符，不能<br>用前者给一个char类型的变量赋值。</li><li>“1234567”当然也和1234567是不一样的，不能用前者给一个int类型变量赋值。</li><li>字符串常量里可以包含转义字符</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 输入">printf(&quot;123\t456\nabc\n&quot;);<br>printf(&quot;123\&#x27;45\n&quot;);<br>printf(&quot;UVWX\&quot;YZ\n&quot;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 输出">123 456<br>abc<br>123&#x27;45<br>UVWX&quot;YZ<br></code></pre></td></tr></table></figure><h3 id="9-符号常量"><a href="#9-符号常量" class="headerlink" title="9.符号常量"></a>9.符号常量</h3><ol><li>为了阅读和修改的方便，常用一个由字母和数字组成的符号来代表某个常量，这样的常量就叫符号常量</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 常量名 常量值</span><br></code></pre></td></tr></table></figure><ol start="2"><li>定义之后，程序中所有出现“常量名”的地方，就等价于出现的是“常量值”</li><li>“常量名”的命名规则和变量相同，“常量值”则写什么常量都可以</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NUM 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UNIVERSITY_NAME <span class="hljs-string">&quot;Peking University&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYINT i = 5; </span><br></code></pre></td></tr></table></figure><ol start="4"><li>尽量少使用数值常量，二用符号常量替代它，这样便于修改</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何改为Netlify部署</title>
    <link href="/2025/04/01/%E5%A6%82%E4%BD%95%E6%94%B9%E4%B8%BANetlify%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/04/01/%E5%A6%82%E4%BD%95%E6%94%B9%E4%B8%BANetlify%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="如何改为Netlify部署"><a href="#如何改为Netlify部署" class="headerlink" title="如何改为Netlify部署"></a>如何改为Netlify部署</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><p><a href="https://app.netlify.com/">Netlify链接</a><br><a href="https://www.dnspod.cn/Products/dns">DNSpod链接</a><br><a href="https://yundunnext.console.aliyun.com/">阿里证书申请链接</a></p><h2 id="2-netlify设置"><a href="#2-netlify设置" class="headerlink" title="2.netlify设置"></a>2.netlify设置</h2><p>使用你的 GitHub 账号登陆 Netlify 并链接 GitHub 仓库<br>尝试点击二级域名，看是否能正常登录<br>添加自定义域名<br>在DNSpod里添加记录（此处提示与vercel有冲突，把vercel记录暂停）<br>Netlify内容更新后申请证书，（阿里云一次免费三个月，一年可申请20次）<br>申请阿里的证书需要在DNSpod再添加一条记录<br>记录通过验证,获取证书后，下载apache，在Netlify从上至下分别填入 public.crt，key ，chain</p><p>#总结<br>解决了vercel在国内不开梯子时总是登陆不上的问题</p>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD文件上传简化</title>
    <link href="/2025/04/01/MD%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%AE%80%E5%8C%96/"/>
    <url>/2025/04/01/MD%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%AE%80%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="MD文件上传简化"><a href="#MD文件上传简化" class="headerlink" title="MD文件上传简化"></a>MD文件上传简化</h1><h2 id="1-在hexo-blog文件夹下创建四个文件：hexo-run-sh-，Run-Hexo-bat-，hexo-deploy-sh-，Run-Deploy-bat"><a href="#1-在hexo-blog文件夹下创建四个文件：hexo-run-sh-，Run-Hexo-bat-，hexo-deploy-sh-，Run-Deploy-bat" class="headerlink" title="1.在hexo-blog文件夹下创建四个文件：hexo-run.sh ，Run-Hexo.bat ，hexo-deploy.sh ，Run-Deploy.bat"></a>1.在hexo-blog文件夹下创建四个文件：hexo-run.sh ，Run-Hexo.bat ，hexo-deploy.sh ，Run-Deploy.bat</h2><h2 id="2-编辑文件"><a href="#2-编辑文件" class="headerlink" title="2.编辑文件"></a>2.编辑文件</h2><h3 id="1-hexo-run-sh"><a href="#1-hexo-run-sh" class="headerlink" title="1.hexo-run.sh"></a>1.hexo-run.sh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs hexo-run.sh">#!/bin/bash<br>echo &quot;▶ 正在清理生成文件...&quot;<br>hexo clean<br><br>echo &quot;▶ 正在生成静态页面...&quot;<br>hexo g<br><br>echo &quot;▶ 启动本地服务器...&quot;<br>hexo s<br><br>echo -e &quot;\n✅ 所有操作已完成！浏览器访问 http://localhost:4000&quot;<br></code></pre></td></tr></table></figure><h3 id="2-Run-Hexo-bat"><a href="#2-Run-Hexo-bat" class="headerlink" title="2.Run-Hexo.bat"></a>2.Run-Hexo.bat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Run-Hexo.bat">@echo off<br>cd /d %~dp0<br>&quot;自己的Git目录\git\PortableGit\bin\bash.exe&quot; --login -i -c &quot;./hexo-run.sh&quot;<br>pause<br></code></pre></td></tr></table></figure><h3 id="3-hexo-deploy-sh"><a href="#3-hexo-deploy-sh" class="headerlink" title="3.hexo-deploy.sh"></a>3.hexo-deploy.sh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs hexo-deploy.sh">#!/bin/bash<br><br>echo &quot;▶ 正在清理生成文件...&quot;<br>hexo clean<br><br>echo &quot;▶ 正在生成静态页面...&quot;<br>hexo g<br><br>echo &quot;▶ 开始部署到服务器...&quot;<br>hexo d<br><br>echo -e &quot;\n✅ 所有部署操作已完成！请检查远程仓库更新情况&quot;<br></code></pre></td></tr></table></figure><h3 id="4-Run-Deploy-bat"><a href="#4-Run-Deploy-bat" class="headerlink" title="4.Run-Deploy.bat"></a>4.Run-Deploy.bat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Run-Deploy.bat">@echo off<br>cd /d %~dp0<br>&quot;自己的git目录\git\PortableGit\bin\bash.exe&quot; --login -i -c &quot;./hexo-deploy.sh&quot;<br>pause<br></code></pre></td></tr></table></figure><h2 id="3-使用说明"><a href="#3-使用说明" class="headerlink" title="3.使用说明"></a>3.使用说明</h2><p>1.双击执行Run-Hexo.bat，等同于在hexo-blog文件夹下执行git bash here命令行执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，即本地部署<br>2.双击执行Run-Deploy.bat，等同于在hexo-blog文件夹下执行git bash here命令行执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d，即服务器部署<br>3.优点：简化操作，保持Git Bash环境，彩色终端输出，支持bash高级功能</p>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站部署教程</title>
    <link href="/2025/04/01/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <url>/2025/04/01/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="网站部署教程"><a href="#网站部署教程" class="headerlink" title="网站部署教程"></a>网站部署教程</h1><h2 id="1-工具安装：nodejs-git"><a href="#1-工具安装：nodejs-git" class="headerlink" title="1.工具安装：nodejs git"></a>1.工具安装：nodejs git</h2><h3 id="安装node-js长期版，自动配置环境变量"><a href="#安装node-js长期版，自动配置环境变量" class="headerlink" title="安装node.js长期版，自动配置环境变量"></a>安装node.js长期版，自动配置环境变量</h3><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">node.js链接</a>   <a href="https://git-scm.com/downloads">git链接</a></p><p>nodejs链接 <a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn</a><br>git链接 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>验证安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git --version<br>node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>git镜像设置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm config <span class="hljs-built_in">set</span>  registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>git设置用户名，邮箱（github的用户名及邮箱）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global user.name &quot;自己的GitHub用户名&quot;<br>git config --global user.email &quot;自己的GitHub邮箱&quot;<br></code></pre></td></tr></table></figure><p>验证用户名邮箱</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global -l<br></code></pre></td></tr></table></figure><h2 id="2-连接github"><a href="#2-连接github" class="headerlink" title="2.连接github"></a>2.连接github</h2><p>创建ssh密钥</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen -t rsa -C &quot;自己的GitHub邮箱&quot;<br></code></pre></td></tr></table></figure><p>进入C:\Users\MIR.ssh复制id_rsa.pub内容<br>github中个人setting-SSH and GPG keys点击New SSH key，粘贴到key中，title随便设置，add ssh key<br>验证连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">ssh -T git@ssh.github.com //输入yes,显示“Hi xxx! You&#x27;ve successfully……” 即连接成功<br></code></pre></td></tr></table></figure><h2 id="3-创建github创建仓库"><a href="#3-创建github创建仓库" class="headerlink" title="3.创建github创建仓库"></a>3.创建github创建仓库</h2><p>仓库名：用户名.github.io,   勾选readme</p><h2 id="4-下载hexo并本地部署"><a href="#4-下载hexo并本地部署" class="headerlink" title="4.下载hexo并本地部署"></a>4.下载hexo并本地部署</h2><p>新建文件夹Hexo-Blog 右键git bash here<br>安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>创建博客文件并初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo init<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5.部署 Hexo 到 GitHub Pages"></a>5.部署 Hexo 到 GitHub Pages</h2><p>安装 hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改 _config.yml 文件末尾的 Deployment</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs config.yml">deploy:<br>    type: git<br>    repository: git@ssh.github.com:用户名/用户名.github.io.git<br>    branch: main<br></code></pre></td></tr></table></figure><p> 生成本地页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo d<br></code></pre></td></tr></table></figure><p>（完成）</p><h2 id="6-更改主题（可选）"><a href="#6-更改主题（可选）" class="headerlink" title="6.更改主题（可选）"></a>6.更改主题（可选）</h2><p>下载主题(以next主题为例)<a href="https://github.com/iissnan/hexo-theme-next/releases">next主题</a><br>下载并解压到theme文件夹下，并将hexo-theme-next更名为next<br>修改 _config.yml 文件的theme: next</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs _config.yml">theme: next<br></code></pre></td></tr></table></figure><p>git bash here中安装hexo-renderer-swig插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install hexo-renderer-swig --save<br></code></pre></td></tr></table></figure><p>清除缓存并重新生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">hexo clean<br>hexo generate<br>hexo s --debug<br><br>或者 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 一步完成<br></code></pre></td></tr></table></figure><h2 id="7-修改全局配置文件-config-yml-可选"><a href="#7-修改全局配置文件-config-yml-可选" class="headerlink" title="7.修改全局配置文件*config.yml(可选)"></a>7.修改全局配置文件*config.yml(可选)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs *config.yml">titile: 博客名<br>subtitle: &quot;副标题&quot;<br>description: &quot;描述&quot;<br>author: 作者<br>language: zh-CN<br>timezone: Asia/Shanghai<br></code></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h4 id="1-github仓库名必须与用户名相同"><a href="#1-github仓库名必须与用户名相同" class="headerlink" title="1.github仓库名必须与用户名相同"></a>1.github仓库名必须与用户名相同</h4><h4 id="2-config-yml文件修改时的“-”后需加空格"><a href="#2-config-yml文件修改时的“-”后需加空格" class="headerlink" title="2.*config.yml文件修改时的“:”后需加空格"></a>2.*config.yml文件修改时的“:”后需加空格</h4><h4 id="3-主题推荐："><a href="#3-主题推荐：" class="headerlink" title="3.主题推荐："></a>3.主题推荐：</h4><p>1.<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>        2.<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a> 3.<a href="https://github.com/litten/hexo-theme-yilia">Yilia</a> 4.<a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> 5.<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 6.<a href="https://github.com/Molunerfinn/hexo-theme-melody">Melody</a><br>7.<a href="https://github.com/theme-next/hexo-theme-next">NexT (Rebirth)</a> 8.<a href="https://github.com/probberechts/hexo-theme-cactus">Cactus</a> 9.<a href="https://github.com/iTimeTraveler/hexo-theme-hiero">Hiero</a> 10.<a href="https://github.com/pinggod/hexo-theme-apollo">Apollo</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md文件模板</title>
    <link href="/2025/04/01/%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/04/01/%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h2><p><a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">node.js链接</a></p><h2 id="3-命令行"><a href="#3-命令行" class="headerlink" title="3.命令行"></a>3.命令行</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git --version<br>node -v<br>npm -v<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIR的个人博客</title>
    <link href="/2025/02/06/MIR%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/02/06/MIR%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>1.这是一个通过hexo连接github，再通过vercel部署的个人网站<br>2.此后本人也会在该站分享学习路程</p>]]></content>
    
    
    
    <tags>
      
      <tag>科技 生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/06/hello-world/"/>
    <url>/2025/02/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
